/**
 * Entitas Generated Components and Extensions for ShmupWarz
 *
 * do not edit this file
 */
namespace Entitas {

    const int POOL_SIZE = 128;

    /**
    * Component extensions
    */
    const string[] components = {
        "BoundsComponent",
        "BulletComponent",
        "ColorTweenComponent",
        "DestroyComponent",
        "EnemyComponent",
        "ExpiresComponent",
        "FiringComponent",
        "HealthComponent",
        "LayerComponent",
        "LifeComponent",
        "MineComponent",
        "MouseComponent",
        "PlayerComponent",
        "PositionComponent",
        "ResourceComponent",
        "ScaleTweenComponent",
        "ScaleComponent",
        "ScoreComponent",
        "SoundEffectComponent",
        "TintComponent",
        "VelocityComponent",
        ""
    };

    public enum Component {
        Bounds,
        Bullet,
        ColorTween,
        Destroy,
        Enemy,
        Expires,
        Firing,
        Health,
        Layer,
        Life,
        Mine,
        Mouse,
        Player,
        Position,
        Resource,
        ScaleTween,
        Scale,
        Score,
        SoundEffect,
        Tint,
        Velocity,
        TotalComponents
    }


    public class BoundsComponent : Object, IComponent {
        public double radius;  

    }
    public class BulletComponent : Object, IComponent {
        public bool active = true;

    }
    public class ColorTweenComponent : Object, IComponent {
        public double redMin;  
        public double redMax;  
        public double redSpeed;  
        public double greenMin;  
        public double greenMax;  
        public double greenSpeed;  
        public double blueMin;  
        public double blueMax;  
        public double blueSpeed;  
        public double alphaMin;  
        public double alphaMax;  
        public double alphaSpeed;  
        public bool redAnimate;  
        public bool greenAnimate;  
        public bool blueAnimate;  
        public bool alphaAnimate;  
        public bool repeat;  

    }
    public class DestroyComponent : Object, IComponent {
        public bool active = true;

    }
    public class EnemyComponent : Object, IComponent {
        public bool active = true;

    }
    public class ExpiresComponent : Object, IComponent {
        public double delay;  

    }
    public class FiringComponent : Object, IComponent {
        public bool active = true;

    }
    public class HealthComponent : Object, IComponent {
        public double health;  
        public double maximumHealth;  

    }
    public class LayerComponent : Object, IComponent {
        public int ordinal;  

    }
    public class LifeComponent : Object, IComponent {
        public int count;  

    }
    public class MineComponent : Object, IComponent {
        public bool active = true;

    }
    public class MouseComponent : Object, IComponent {
        public double x;  
        public double y;  

    }
    public class PlayerComponent : Object, IComponent {
        public bool active = true;

    }
    public class PositionComponent : Object, IComponent {
        public double x;  
        public double y;  

    }
    public class ResourceComponent : Object, IComponent {
        public string path;  
        public Object sprite;  
        public bool bgd;  

    }
    public class ScaleTweenComponent : Object, IComponent {
        public double min;  
        public double max;  
        public double speed;  
        public bool repeat;  
        public bool active;  

    }
    public class ScaleComponent : Object, IComponent {
        public double x;  
        public double y;  

    }
    public class ScoreComponent : Object, IComponent {
        public double value;  

    }
    public class SoundEffectComponent : Object, IComponent {
        public int effect;  

    }
    public class TintComponent : Object, IComponent {
        public int r;  
        public int g;  
        public int b;  
        public int a;  

    }
    public class VelocityComponent : Object, IComponent {
        public double x;  
        public double y;  

    }

    /**
    * Entity extensions
    */
    public class Entity : EntityBase {

        public Entity(string[] componentsEnum, int totalComponents = 32) {
            base(componentsEnum, totalComponents);
            /* Preallocate component pools*/
            _boundsComponentPool = new Bag<BoundsComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _boundsComponentPool.push(new BoundsComponent());
            }
 
            _bulletComponent = new BulletComponent();
            _colorTweenComponentPool = new Bag<ColorTweenComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _colorTweenComponentPool.push(new ColorTweenComponent());
            }
 
            _destroyComponent = new DestroyComponent();
 
            _enemyComponent = new EnemyComponent();
            _expiresComponentPool = new Bag<ExpiresComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _expiresComponentPool.push(new ExpiresComponent());
            }
 
            _firingComponent = new FiringComponent();
            _healthComponentPool = new Bag<HealthComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _healthComponentPool.push(new HealthComponent());
            }
            _layerComponentPool = new Bag<LayerComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _layerComponentPool.push(new LayerComponent());
            }
            _lifeComponentPool = new Bag<LifeComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _lifeComponentPool.push(new LifeComponent());
            }
 
            _mineComponent = new MineComponent();
            _mouseComponentPool = new Bag<MouseComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _mouseComponentPool.push(new MouseComponent());
            }
 
            _playerComponent = new PlayerComponent();
            _positionComponentPool = new Bag<PositionComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _positionComponentPool.push(new PositionComponent());
            }
            _resourceComponentPool = new Bag<ResourceComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _resourceComponentPool.push(new ResourceComponent());
            }
            _scaleTweenComponentPool = new Bag<ScaleTweenComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _scaleTweenComponentPool.push(new ScaleTweenComponent());
            }
            _scaleComponentPool = new Bag<ScaleComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _scaleComponentPool.push(new ScaleComponent());
            }
            _scoreComponentPool = new Bag<ScoreComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _scoreComponentPool.push(new ScoreComponent());
            }
            _soundEffectComponentPool = new Bag<SoundEffectComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _soundEffectComponentPool.push(new SoundEffectComponent());
            }
            _tintComponentPool = new Bag<TintComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _tintComponentPool.push(new TintComponent());
            }
            _velocityComponentPool = new Bag<VelocityComponent>();
            for (var i=0; i < POOL_SIZE; i++) {
                _velocityComponentPool.push(new VelocityComponent());
            }

        }

        /** Entity: Bounds methods*/

        /** @type Bounds */
        public BoundsComponent bounds {
            get {
                return (BoundsComponent)getComponent(Component.Bounds);
            }
        }
        /** @type boolean */
        public bool hasBounds {
            get {
                return hasComponent(Component.Bounds);
            }
        }
        public void clearBoundsComponentPool() {
            _boundsComponentPool.clear();
        }
        /**
         * @param radius double
         * @returns entitas.Entity
         */
        public Entity addBounds(double radius) {
            var c = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop() : new BoundsComponent();
            c.radius = radius;
            addComponent(Component.Bounds, c);
            return this;
        }
        /**
         * @param radius double
         * @returns entitas.Entity
         */
        public Entity replaceBounds(double radius) {
            var previousComponent = hasBounds ? this.bounds : null;
            var c = _boundsComponentPool.length > 0 ? _boundsComponentPool.pop() : new BoundsComponent();
            c.radius = radius;
            replaceComponent(Component.Bounds, c) ;
            if (previousComponent != null)
                _boundsComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeBounds() {
            var c = bounds;
            removeComponent(Component.Bounds);
            _boundsComponentPool.push(c);
            return this;
        }

        /** Entity: Bullet methods*/


        /** @type boolean */
        public bool isBullet {
            get {
                return hasComponent(Component.Bullet);
            }
            set {
                if (value)
                    addComponent(Component.Bullet, _bulletComponent);
                else
                    removeComponent(Component.Bullet);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setBullet(bool value) {
            isBullet = value;
            return this;
        }

        /** Entity: ColorTween methods*/

        /** @type ColorTween */
        public ColorTweenComponent colorTween {
            get {
                return (ColorTweenComponent)getComponent(Component.ColorTween);
            }
        }
        /** @type boolean */
        public bool hasColorTween {
            get {
                return hasComponent(Component.ColorTween);
            }
        }
        public void clearColorTweenComponentPool() {
            _colorTweenComponentPool.clear();
        }
        /**
         * @param redMin double
         * @param redMax double
         * @param redSpeed double
         * @param greenMin double
         * @param greenMax double
         * @param greenSpeed double
         * @param blueMin double
         * @param blueMax double
         * @param blueSpeed double
         * @param alphaMin double
         * @param alphaMax double
         * @param alphaSpeed double
         * @param redAnimate bool
         * @param greenAnimate bool
         * @param blueAnimate bool
         * @param alphaAnimate bool
         * @param repeat bool
         * @returns entitas.Entity
         */
        public Entity addColorTween(double redMin, double redMax, double redSpeed, double greenMin, double greenMax, double greenSpeed, double blueMin, double blueMax, double blueSpeed, double alphaMin, double alphaMax, double alphaSpeed, bool redAnimate, bool greenAnimate, bool blueAnimate, bool alphaAnimate, bool repeat) {
            var c = _colorTweenComponentPool.length > 0 ? _colorTweenComponentPool.pop() : new ColorTweenComponent();
            c.redMin = redMin;
            c.redMax = redMax;
            c.redSpeed = redSpeed;
            c.greenMin = greenMin;
            c.greenMax = greenMax;
            c.greenSpeed = greenSpeed;
            c.blueMin = blueMin;
            c.blueMax = blueMax;
            c.blueSpeed = blueSpeed;
            c.alphaMin = alphaMin;
            c.alphaMax = alphaMax;
            c.alphaSpeed = alphaSpeed;
            c.redAnimate = redAnimate;
            c.greenAnimate = greenAnimate;
            c.blueAnimate = blueAnimate;
            c.alphaAnimate = alphaAnimate;
            c.repeat = repeat;
            addComponent(Component.ColorTween, c);
            return this;
        }
        /**
         * @param redMin double
         * @param redMax double
         * @param redSpeed double
         * @param greenMin double
         * @param greenMax double
         * @param greenSpeed double
         * @param blueMin double
         * @param blueMax double
         * @param blueSpeed double
         * @param alphaMin double
         * @param alphaMax double
         * @param alphaSpeed double
         * @param redAnimate bool
         * @param greenAnimate bool
         * @param blueAnimate bool
         * @param alphaAnimate bool
         * @param repeat bool
         * @returns entitas.Entity
         */
        public Entity replaceColorTween(double redMin, double redMax, double redSpeed, double greenMin, double greenMax, double greenSpeed, double blueMin, double blueMax, double blueSpeed, double alphaMin, double alphaMax, double alphaSpeed, bool redAnimate, bool greenAnimate, bool blueAnimate, bool alphaAnimate, bool repeat) {
            var previousComponent = hasColorTween ? this.colorTween : null;
            var c = _colorTweenComponentPool.length > 0 ? _colorTweenComponentPool.pop() : new ColorTweenComponent();
            c.redMin = redMin;
            c.redMax = redMax;
            c.redSpeed = redSpeed;
            c.greenMin = greenMin;
            c.greenMax = greenMax;
            c.greenSpeed = greenSpeed;
            c.blueMin = blueMin;
            c.blueMax = blueMax;
            c.blueSpeed = blueSpeed;
            c.alphaMin = alphaMin;
            c.alphaMax = alphaMax;
            c.alphaSpeed = alphaSpeed;
            c.redAnimate = redAnimate;
            c.greenAnimate = greenAnimate;
            c.blueAnimate = blueAnimate;
            c.alphaAnimate = alphaAnimate;
            c.repeat = repeat;
            replaceComponent(Component.ColorTween, c) ;
            if (previousComponent != null)
                _colorTweenComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeColorTween() {
            var c = colorTween;
            removeComponent(Component.ColorTween);
            _colorTweenComponentPool.push(c);
            return this;
        }

        /** Entity: Destroy methods*/


        /** @type boolean */
        public bool isDestroy {
            get {
                return hasComponent(Component.Destroy);
            }
            set {
                if (value)
                    addComponent(Component.Destroy, _destroyComponent);
                else
                    removeComponent(Component.Destroy);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setDestroy(bool value) {
            isDestroy = value;
            return this;
        }

        /** Entity: Enemy methods*/


        /** @type boolean */
        public bool isEnemy {
            get {
                return hasComponent(Component.Enemy);
            }
            set {
                if (value)
                    addComponent(Component.Enemy, _enemyComponent);
                else
                    removeComponent(Component.Enemy);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setEnemy(bool value) {
            isEnemy = value;
            return this;
        }

        /** Entity: Expires methods*/

        /** @type Expires */
        public ExpiresComponent expires {
            get {
                return (ExpiresComponent)getComponent(Component.Expires);
            }
        }
        /** @type boolean */
        public bool hasExpires {
            get {
                return hasComponent(Component.Expires);
            }
        }
        public void clearExpiresComponentPool() {
            _expiresComponentPool.clear();
        }
        /**
         * @param delay double
         * @returns entitas.Entity
         */
        public Entity addExpires(double delay) {
            var c = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop() : new ExpiresComponent();
            c.delay = delay;
            addComponent(Component.Expires, c);
            return this;
        }
        /**
         * @param delay double
         * @returns entitas.Entity
         */
        public Entity replaceExpires(double delay) {
            var previousComponent = hasExpires ? this.expires : null;
            var c = _expiresComponentPool.length > 0 ? _expiresComponentPool.pop() : new ExpiresComponent();
            c.delay = delay;
            replaceComponent(Component.Expires, c) ;
            if (previousComponent != null)
                _expiresComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeExpires() {
            var c = expires;
            removeComponent(Component.Expires);
            _expiresComponentPool.push(c);
            return this;
        }

        /** Entity: Firing methods*/


        /** @type boolean */
        public bool isFiring {
            get {
                return hasComponent(Component.Firing);
            }
            set {
                if (value)
                    addComponent(Component.Firing, _firingComponent);
                else
                    removeComponent(Component.Firing);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setFiring(bool value) {
            isFiring = value;
            return this;
        }

        /** Entity: Health methods*/

        /** @type Health */
        public HealthComponent health {
            get {
                return (HealthComponent)getComponent(Component.Health);
            }
        }
        /** @type boolean */
        public bool hasHealth {
            get {
                return hasComponent(Component.Health);
            }
        }
        public void clearHealthComponentPool() {
            _healthComponentPool.clear();
        }
        /**
         * @param health double
         * @param maximumHealth double
         * @returns entitas.Entity
         */
        public Entity addHealth(double health, double maximumHealth) {
            var c = _healthComponentPool.length > 0 ? _healthComponentPool.pop() : new HealthComponent();
            c.health = health;
            c.maximumHealth = maximumHealth;
            addComponent(Component.Health, c);
            return this;
        }
        /**
         * @param health double
         * @param maximumHealth double
         * @returns entitas.Entity
         */
        public Entity replaceHealth(double health, double maximumHealth) {
            var previousComponent = hasHealth ? this.health : null;
            var c = _healthComponentPool.length > 0 ? _healthComponentPool.pop() : new HealthComponent();
            c.health = health;
            c.maximumHealth = maximumHealth;
            replaceComponent(Component.Health, c) ;
            if (previousComponent != null)
                _healthComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeHealth() {
            var c = health;
            removeComponent(Component.Health);
            _healthComponentPool.push(c);
            return this;
        }

        /** Entity: Layer methods*/

        /** @type Layer */
        public LayerComponent layer {
            get {
                return (LayerComponent)getComponent(Component.Layer);
            }
        }
        /** @type boolean */
        public bool hasLayer {
            get {
                return hasComponent(Component.Layer);
            }
        }
        public void clearLayerComponentPool() {
            _layerComponentPool.clear();
        }
        /**
         * @param ordinal int
         * @returns entitas.Entity
         */
        public Entity addLayer(int ordinal) {
            var c = _layerComponentPool.length > 0 ? _layerComponentPool.pop() : new LayerComponent();
            c.ordinal = ordinal;
            addComponent(Component.Layer, c);
            return this;
        }
        /**
         * @param ordinal int
         * @returns entitas.Entity
         */
        public Entity replaceLayer(int ordinal) {
            var previousComponent = hasLayer ? this.layer : null;
            var c = _layerComponentPool.length > 0 ? _layerComponentPool.pop() : new LayerComponent();
            c.ordinal = ordinal;
            replaceComponent(Component.Layer, c) ;
            if (previousComponent != null)
                _layerComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeLayer() {
            var c = layer;
            removeComponent(Component.Layer);
            _layerComponentPool.push(c);
            return this;
        }

        /** Entity: Life methods*/

        /** @type Life */
        public LifeComponent life {
            get {
                return (LifeComponent)getComponent(Component.Life);
            }
        }
        /** @type boolean */
        public bool hasLife {
            get {
                return hasComponent(Component.Life);
            }
        }
        public void clearLifeComponentPool() {
            _lifeComponentPool.clear();
        }
        /**
         * @param count int
         * @returns entitas.Entity
         */
        public Entity addLife(int count) {
            var c = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop() : new LifeComponent();
            c.count = count;
            addComponent(Component.Life, c);
            return this;
        }
        /**
         * @param count int
         * @returns entitas.Entity
         */
        public Entity replaceLife(int count) {
            var previousComponent = hasLife ? this.life : null;
            var c = _lifeComponentPool.length > 0 ? _lifeComponentPool.pop() : new LifeComponent();
            c.count = count;
            replaceComponent(Component.Life, c) ;
            if (previousComponent != null)
                _lifeComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeLife() {
            var c = life;
            removeComponent(Component.Life);
            _lifeComponentPool.push(c);
            return this;
        }

        /** Entity: Mine methods*/


        /** @type boolean */
        public bool isMine {
            get {
                return hasComponent(Component.Mine);
            }
            set {
                if (value)
                    addComponent(Component.Mine, _mineComponent);
                else
                    removeComponent(Component.Mine);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setMine(bool value) {
            isMine = value;
            return this;
        }

        /** Entity: Mouse methods*/

        /** @type Mouse */
        public MouseComponent mouse {
            get {
                return (MouseComponent)getComponent(Component.Mouse);
            }
        }
        /** @type boolean */
        public bool hasMouse {
            get {
                return hasComponent(Component.Mouse);
            }
        }
        public void clearMouseComponentPool() {
            _mouseComponentPool.clear();
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity addMouse(double x, double y) {
            var c = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop() : new MouseComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Mouse, c);
            return this;
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity replaceMouse(double x, double y) {
            var previousComponent = hasMouse ? this.mouse : null;
            var c = _mouseComponentPool.length > 0 ? _mouseComponentPool.pop() : new MouseComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Mouse, c) ;
            if (previousComponent != null)
                _mouseComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeMouse() {
            var c = mouse;
            removeComponent(Component.Mouse);
            _mouseComponentPool.push(c);
            return this;
        }

        /** Entity: Player methods*/


        /** @type boolean */
        public bool isPlayer {
            get {
                return hasComponent(Component.Player);
            }
            set {
                if (value)
                    addComponent(Component.Player, _playerComponent);
                else
                    removeComponent(Component.Player);
            }
        }
        /**
         * @param value boolean 
         * @returns entitas.Entity
         */
        public Entity setPlayer(bool value) {
            isPlayer = value;
            return this;
        }

        /** Entity: Position methods*/

        /** @type Position */
        public PositionComponent position {
            get {
                return (PositionComponent)getComponent(Component.Position);
            }
        }
        /** @type boolean */
        public bool hasPosition {
            get {
                return hasComponent(Component.Position);
            }
        }
        public void clearPositionComponentPool() {
            _positionComponentPool.clear();
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity addPosition(double x, double y) {
            var c = _positionComponentPool.length > 0 ? _positionComponentPool.pop() : new PositionComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Position, c);
            return this;
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity replacePosition(double x, double y) {
            var previousComponent = hasPosition ? this.position : null;
            var c = _positionComponentPool.length > 0 ? _positionComponentPool.pop() : new PositionComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Position, c) ;
            if (previousComponent != null)
                _positionComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removePosition() {
            var c = position;
            removeComponent(Component.Position);
            _positionComponentPool.push(c);
            return this;
        }

        /** Entity: Resource methods*/

        /** @type Resource */
        public ResourceComponent resource {
            get {
                return (ResourceComponent)getComponent(Component.Resource);
            }
        }
        /** @type boolean */
        public bool hasResource {
            get {
                return hasComponent(Component.Resource);
            }
        }
        public void clearResourceComponentPool() {
            _resourceComponentPool.clear();
        }
        /**
         * @param path string
         * @param sprite Object
         * @param bgd bool
         * @returns entitas.Entity
         */
        public Entity addResource(string path, Object? sprite, bool bgd) {
            var c = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop() : new ResourceComponent();
            c.path = path;
            c.sprite = sprite;
            c.bgd = bgd;
            addComponent(Component.Resource, c);
            return this;
        }
        /**
         * @param path string
         * @param sprite Object
         * @param bgd bool
         * @returns entitas.Entity
         */
        public Entity replaceResource(string path, Object? sprite, bool bgd) {
            var previousComponent = hasResource ? this.resource : null;
            var c = _resourceComponentPool.length > 0 ? _resourceComponentPool.pop() : new ResourceComponent();
            c.path = path;
            c.sprite = sprite;
            c.bgd = bgd;
            replaceComponent(Component.Resource, c) ;
            if (previousComponent != null)
                _resourceComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeResource() {
            var c = resource;
            removeComponent(Component.Resource);
            _resourceComponentPool.push(c);
            return this;
        }

        /** Entity: ScaleTween methods*/

        /** @type ScaleTween */
        public ScaleTweenComponent scaleTween {
            get {
                return (ScaleTweenComponent)getComponent(Component.ScaleTween);
            }
        }
        /** @type boolean */
        public bool hasScaleTween {
            get {
                return hasComponent(Component.ScaleTween);
            }
        }
        public void clearScaleTweenComponentPool() {
            _scaleTweenComponentPool.clear();
        }
        /**
         * @param min double
         * @param max double
         * @param speed double
         * @param repeat bool
         * @param active bool
         * @returns entitas.Entity
         */
        public Entity addScaleTween(double min, double max, double speed, bool repeat, bool active) {
            var c = _scaleTweenComponentPool.length > 0 ? _scaleTweenComponentPool.pop() : new ScaleTweenComponent();
            c.min = min;
            c.max = max;
            c.speed = speed;
            c.repeat = repeat;
            c.active = active;
            addComponent(Component.ScaleTween, c);
            return this;
        }
        /**
         * @param min double
         * @param max double
         * @param speed double
         * @param repeat bool
         * @param active bool
         * @returns entitas.Entity
         */
        public Entity replaceScaleTween(double min, double max, double speed, bool repeat, bool active) {
            var previousComponent = hasScaleTween ? this.scaleTween : null;
            var c = _scaleTweenComponentPool.length > 0 ? _scaleTweenComponentPool.pop() : new ScaleTweenComponent();
            c.min = min;
            c.max = max;
            c.speed = speed;
            c.repeat = repeat;
            c.active = active;
            replaceComponent(Component.ScaleTween, c) ;
            if (previousComponent != null)
                _scaleTweenComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeScaleTween() {
            var c = scaleTween;
            removeComponent(Component.ScaleTween);
            _scaleTweenComponentPool.push(c);
            return this;
        }

        /** Entity: Scale methods*/

        /** @type Scale */
        public ScaleComponent scale {
            get {
                return (ScaleComponent)getComponent(Component.Scale);
            }
        }
        /** @type boolean */
        public bool hasScale {
            get {
                return hasComponent(Component.Scale);
            }
        }
        public void clearScaleComponentPool() {
            _scaleComponentPool.clear();
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity addScale(double x, double y) {
            var c = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop() : new ScaleComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Scale, c);
            return this;
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity replaceScale(double x, double y) {
            var previousComponent = hasScale ? this.scale : null;
            var c = _scaleComponentPool.length > 0 ? _scaleComponentPool.pop() : new ScaleComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Scale, c) ;
            if (previousComponent != null)
                _scaleComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeScale() {
            var c = scale;
            removeComponent(Component.Scale);
            _scaleComponentPool.push(c);
            return this;
        }

        /** Entity: Score methods*/

        /** @type Score */
        public ScoreComponent score {
            get {
                return (ScoreComponent)getComponent(Component.Score);
            }
        }
        /** @type boolean */
        public bool hasScore {
            get {
                return hasComponent(Component.Score);
            }
        }
        public void clearScoreComponentPool() {
            _scoreComponentPool.clear();
        }
        /**
         * @param value double
         * @returns entitas.Entity
         */
        public Entity addScore(double value) {
            var c = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop() : new ScoreComponent();
            c.value = value;
            addComponent(Component.Score, c);
            return this;
        }
        /**
         * @param value double
         * @returns entitas.Entity
         */
        public Entity replaceScore(double value) {
            var previousComponent = hasScore ? this.score : null;
            var c = _scoreComponentPool.length > 0 ? _scoreComponentPool.pop() : new ScoreComponent();
            c.value = value;
            replaceComponent(Component.Score, c) ;
            if (previousComponent != null)
                _scoreComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeScore() {
            var c = score;
            removeComponent(Component.Score);
            _scoreComponentPool.push(c);
            return this;
        }

        /** Entity: SoundEffect methods*/

        /** @type SoundEffect */
        public SoundEffectComponent soundEffect {
            get {
                return (SoundEffectComponent)getComponent(Component.SoundEffect);
            }
        }
        /** @type boolean */
        public bool hasSoundEffect {
            get {
                return hasComponent(Component.SoundEffect);
            }
        }
        public void clearSoundEffectComponentPool() {
            _soundEffectComponentPool.clear();
        }
        /**
         * @param effect int
         * @returns entitas.Entity
         */
        public Entity addSoundEffect(int effect) {
            var c = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop() : new SoundEffectComponent();
            c.effect = effect;
            addComponent(Component.SoundEffect, c);
            return this;
        }
        /**
         * @param effect int
         * @returns entitas.Entity
         */
        public Entity replaceSoundEffect(int effect) {
            var previousComponent = hasSoundEffect ? this.soundEffect : null;
            var c = _soundEffectComponentPool.length > 0 ? _soundEffectComponentPool.pop() : new SoundEffectComponent();
            c.effect = effect;
            replaceComponent(Component.SoundEffect, c) ;
            if (previousComponent != null)
                _soundEffectComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeSoundEffect() {
            var c = soundEffect;
            removeComponent(Component.SoundEffect);
            _soundEffectComponentPool.push(c);
            return this;
        }

        /** Entity: Tint methods*/

        /** @type Tint */
        public TintComponent tint {
            get {
                return (TintComponent)getComponent(Component.Tint);
            }
        }
        /** @type boolean */
        public bool hasTint {
            get {
                return hasComponent(Component.Tint);
            }
        }
        public void clearTintComponentPool() {
            _tintComponentPool.clear();
        }
        /**
         * @param r int
         * @param g int
         * @param b int
         * @param a int
         * @returns entitas.Entity
         */
        public Entity addTint(int r, int g, int b, int a) {
            var c = _tintComponentPool.length > 0 ? _tintComponentPool.pop() : new TintComponent();
            c.r = r;
            c.g = g;
            c.b = b;
            c.a = a;
            addComponent(Component.Tint, c);
            return this;
        }
        /**
         * @param r int
         * @param g int
         * @param b int
         * @param a int
         * @returns entitas.Entity
         */
        public Entity replaceTint(int r, int g, int b, int a) {
            var previousComponent = hasTint ? this.tint : null;
            var c = _tintComponentPool.length > 0 ? _tintComponentPool.pop() : new TintComponent();
            c.r = r;
            c.g = g;
            c.b = b;
            c.a = a;
            replaceComponent(Component.Tint, c) ;
            if (previousComponent != null)
                _tintComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeTint() {
            var c = tint;
            removeComponent(Component.Tint);
            _tintComponentPool.push(c);
            return this;
        }

        /** Entity: Velocity methods*/

        /** @type Velocity */
        public VelocityComponent velocity {
            get {
                return (VelocityComponent)getComponent(Component.Velocity);
            }
        }
        /** @type boolean */
        public bool hasVelocity {
            get {
                return hasComponent(Component.Velocity);
            }
        }
        public void clearVelocityComponentPool() {
            _velocityComponentPool.clear();
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity addVelocity(double x, double y) {
            var c = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop() : new VelocityComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Velocity, c);
            return this;
        }
        /**
         * @param x double
         * @param y double
         * @returns entitas.Entity
         */
        public Entity replaceVelocity(double x, double y) {
            var previousComponent = hasVelocity ? this.velocity : null;
            var c = _velocityComponentPool.length > 0 ? _velocityComponentPool.pop() : new VelocityComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Velocity, c) ;
            if (previousComponent != null)
                _velocityComponentPool.push(previousComponent);
            return this;
        }
        /**
         * @returns entitas.Entity
         */
        public Entity removeVelocity() {
            var c = velocity;
            removeComponent(Component.Velocity);
            _velocityComponentPool.push(c);
            return this;
        }

        /** @type entitas.utils.Bag<Bounds> */
        Bag<BoundsComponent> _boundsComponentPool;

        /** @type Bullet */
        BulletComponent _bulletComponent;
        /** @type entitas.utils.Bag<ColorTween> */
        Bag<ColorTweenComponent> _colorTweenComponentPool;

        /** @type Destroy */
        DestroyComponent _destroyComponent;

        /** @type Enemy */
        EnemyComponent _enemyComponent;
        /** @type entitas.utils.Bag<Expires> */
        Bag<ExpiresComponent> _expiresComponentPool;

        /** @type Firing */
        FiringComponent _firingComponent;
        /** @type entitas.utils.Bag<Health> */
        Bag<HealthComponent> _healthComponentPool;
        /** @type entitas.utils.Bag<Layer> */
        Bag<LayerComponent> _layerComponentPool;
        /** @type entitas.utils.Bag<Life> */
        Bag<LifeComponent> _lifeComponentPool;

        /** @type Mine */
        MineComponent _mineComponent;
        /** @type entitas.utils.Bag<Mouse> */
        Bag<MouseComponent> _mouseComponentPool;

        /** @type Player */
        PlayerComponent _playerComponent;
        /** @type entitas.utils.Bag<Position> */
        Bag<PositionComponent> _positionComponentPool;
        /** @type entitas.utils.Bag<Resource> */
        Bag<ResourceComponent> _resourceComponentPool;
        /** @type entitas.utils.Bag<ScaleTween> */
        Bag<ScaleTweenComponent> _scaleTweenComponentPool;
        /** @type entitas.utils.Bag<Scale> */
        Bag<ScaleComponent> _scaleComponentPool;
        /** @type entitas.utils.Bag<Score> */
        Bag<ScoreComponent> _scoreComponentPool;
        /** @type entitas.utils.Bag<SoundEffect> */
        Bag<SoundEffectComponent> _soundEffectComponentPool;
        /** @type entitas.utils.Bag<Tint> */
        Bag<TintComponent> _tintComponentPool;
        /** @type entitas.utils.Bag<Velocity> */
        Bag<VelocityComponent> _velocityComponentPool;

    }    
}