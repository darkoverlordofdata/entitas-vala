/**
 * Entitas Generated Components and Extensions for shmupwarz
 *
 * do not edit this file
 */
namespace Entitas {

    const int POOL_SIZE = 128;

    /**
    * Component extensions
    */
    const string[] components = {
        "BoundsComponent",
        "BulletComponent",
        "ColorTweenComponent",
        "DestroyComponent",
        "EnemyComponent",
        "ExpiresComponent",
        "FiringComponent",
        "HealthComponent",
        "LayerComponent",
        "LifeComponent",
        "MineComponent",
        "MouseComponent",
        "PlayerComponent",
        "PositionComponent",
        "ResourceComponent",
        "ScaleTweenComponent",
        "ScaleComponent",
        "ScoreComponent",
        "SoundEffectComponent",
        "TintComponent",
        "VelocityComponent",
        ""
    };

    public enum Component {
        Bounds,
        Bullet,
        ColorTween,
        Destroy,
        Enemy,
        Expires,
        Firing,
        Health,
        Layer,
        Life,
        Mine,
        Mouse,
        Player,
        Position,
        Resource,
        ScaleTween,
        Scale,
        Score,
        SoundEffect,
        Tint,
        Velocity,
        TotalComponents
    }


    public class BoundsComponent : Object, IComponent {
        public double radius;  

    public class BulletComponent : Object, IComponent {
        public bool active = true;

    public class ColorTweenComponent : Object, IComponent {
        public double redMin;  
        public double redMax;  
        public double redSpeed;  
        public double greenMin;  
        public double greenMax;  
        public double greenSpeed;  
        public double blueMin;  
        public double blueMax;  
        public double blueSpeed;  
        public double alphaMin;  
        public double alphaMax;  
        public double alphaSpeed;  
        public bool redAnimate;  
        public bool greenAnimate;  
        public bool blueAnimate;  
        public bool alphaAnimate;  
        public bool repeat;  

    public class DestroyComponent : Object, IComponent {
        public bool active = true;

    public class EnemyComponent : Object, IComponent {
        public bool active = true;

    public class ExpiresComponent : Object, IComponent {
        public double delay;  

    public class FiringComponent : Object, IComponent {
        public bool active = true;

    public class HealthComponent : Object, IComponent {
        public double health;  
        public double maximumHealth;  

    public class LayerComponent : Object, IComponent {
        public int ordinal;  

    public class LifeComponent : Object, IComponent {
        public int count;  

    public class MineComponent : Object, IComponent {
        public bool active = true;

    public class MouseComponent : Object, IComponent {
        public double x;  
        public double y;  

    public class PlayerComponent : Object, IComponent {
        public bool active = true;

    public class PositionComponent : Object, IComponent {
        public double x;  
        public double y;  

    public class ResourceComponent : Object, IComponent {
        public string path;  
        public Object sprite;  
        public bool=false bgd;  

    public class ScaleTweenComponent : Object, IComponent {
        public double min;  
        public double max;  
        public double speed;  
        public bool repeat;  
        public bool active;  

    public class ScaleComponent : Object, IComponent {
        public double x;  
        public double y;  

    public class ScoreComponent : Object, IComponent {
        public double value;  

    public class SoundEffectComponent : Object, IComponent {
        public int effect;  

    public class TintComponent : Object, IComponent {
        public int r;  
        public int g;  
        public int b;  
        public int a;  

    public class VelocityComponent : Object, IComponent {
        public double x;  
        public double y;  

    }

    /**
    * Entity extensions
    */
    public class Entity : EntityBase {

        public Entity(string componentsEnum, int totalComponents = 32) {
            super(componentsEnum, totalComponents);
            /* Preallocate component pools*/
            _boundsComponentPool = new Bag of BoundsComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _BoundsComponentPool.push(new BoundsComponent());
            }
            _bulletComponentPool = new Bag of BulletComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _BulletComponentPool.push(new BulletComponent());
            }
            _colorTweenComponentPool = new Bag of ColorTweenComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ColorTweenComponentPool.push(new ColorTweenComponent());
            }
            _destroyComponentPool = new Bag of DestroyComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _DestroyComponentPool.push(new DestroyComponent());
            }
            _enemyComponentPool = new Bag of EnemyComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _EnemyComponentPool.push(new EnemyComponent());
            }
            _expiresComponentPool = new Bag of ExpiresComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ExpiresComponentPool.push(new ExpiresComponent());
            }
            _firingComponentPool = new Bag of FiringComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _FiringComponentPool.push(new FiringComponent());
            }
            _healthComponentPool = new Bag of HealthComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _HealthComponentPool.push(new HealthComponent());
            }
            _layerComponentPool = new Bag of LayerComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _LayerComponentPool.push(new LayerComponent());
            }
            _lifeComponentPool = new Bag of LifeComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _LifeComponentPool.push(new LifeComponent());
            }
            _mineComponentPool = new Bag of MineComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _MineComponentPool.push(new MineComponent());
            }
            _mouseComponentPool = new Bag of MouseComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _MouseComponentPool.push(new MouseComponent());
            }
            _playerComponentPool = new Bag of PlayerComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _PlayerComponentPool.push(new PlayerComponent());
            }
            _positionComponentPool = new Bag of PositionComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _PositionComponentPool.push(new PositionComponent());
            }
            _resourceComponentPool = new Bag of ResourceComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ResourceComponentPool.push(new ResourceComponent());
            }
            _scaleTweenComponentPool = new Bag of ScaleTweenComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ScaleTweenComponentPool.push(new ScaleTweenComponent());
            }
            _scaleComponentPool = new Bag of ScaleComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ScaleComponentPool.push(new ScaleComponent());
            }
            _scoreComponentPool = new Bag of ScoreComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _ScoreComponentPool.push(new ScoreComponent());
            }
            _soundEffectComponentPool = new Bag of SoundEffectComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _SoundEffectComponentPool.push(new SoundEffectComponent());
            }
            _tintComponentPool = new Bag of TintComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _TintComponentPool.push(new TintComponent());
            }
            _velocityComponentPool = new Bag of VelocityComponent;
            for (var i=0; i < POOL_SIZE; i++) {
                _VelocityComponentPool.push(new VelocityComponent());
            }

        }

        /** Entity: Bounds methods*/

        public BoundsComponent bounds {
            get {
                return (BoundsComponent)getComponent(Component.Bounds);
            }
        }
        public bool hasBounds {
            get {
                return hasComponent(Component.Bounds);
            }
        }
        public void clearBoundsComponentPool() {
            _boundsComponentPool.clear();
        }
        public Entity addBounds(radius:double) {
            var c = _boundsComponentPool.length>0? _boundsComponentPool.pop() : new BoundsComponent();
            c.radius = radius;
            addComponent(Component.Bounds, c);
            return this;
        }
        public Entity replaceBounds(radius:double) {
            var previousComponent = hasBounds ? this.Bounds : null;
            var c = _BoundsComponentPool.length>0? _boundsComponentPool.pop() : new BoundsComponent();
            c.radius = radius;
            replaceComponent(Component.Bounds, c) ;
            if (previousComponent != null)
                _boundsComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeBounds() {
            var c = Bounds;
            removeComponent(Component.Bounds);
            _boundsComponentPool.push(c);
            return this;
        }

        /** Entity: Bullet methods*/


        /** @type {boolean} */
        public bool isBullet {
            get {
                return hasComponent(Component.Bullet);
            }
            set {
                if (value)
                    addComponent(Component.Bullet, Entity.BulletComponent);
                else
                    removeComponent(Component.Bullet);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setBullet(bool value) {
            isBullet = value;
            return this;
        }

        /** Entity: ColorTween methods*/

        public ColorTweenComponent colorTween {
            get {
                return (ColorTweenComponent)getComponent(Component.ColorTween);
            }
        }
        public bool hasColorTween {
            get {
                return hasComponent(Component.ColorTween);
            }
        }
        public void clearColorTweenComponentPool() {
            _colorTweenComponentPool.clear();
        }
        public Entity addColorTween(redMin:double,redMax:double,redSpeed:double,greenMin:double,greenMax:double,greenSpeed:double,blueMin:double,blueMax:double,blueSpeed:double,alphaMin:double,alphaMax:double,alphaSpeed:double,redAnimate:bool,greenAnimate:bool,blueAnimate:bool,alphaAnimate:bool,repeat:bool) {
            var c = _colorTweenComponentPool.length>0? _colorTweenComponentPool.pop() : new ColorTweenComponent();
            c.redMin = redMin;
            c.redMax = redMax;
            c.redSpeed = redSpeed;
            c.greenMin = greenMin;
            c.greenMax = greenMax;
            c.greenSpeed = greenSpeed;
            c.blueMin = blueMin;
            c.blueMax = blueMax;
            c.blueSpeed = blueSpeed;
            c.alphaMin = alphaMin;
            c.alphaMax = alphaMax;
            c.alphaSpeed = alphaSpeed;
            c.redAnimate = redAnimate;
            c.greenAnimate = greenAnimate;
            c.blueAnimate = blueAnimate;
            c.alphaAnimate = alphaAnimate;
            c.repeat = repeat;
            addComponent(Component.ColorTween, c);
            return this;
        }
        public Entity replaceColorTween(redMin:double,redMax:double,redSpeed:double,greenMin:double,greenMax:double,greenSpeed:double,blueMin:double,blueMax:double,blueSpeed:double,alphaMin:double,alphaMax:double,alphaSpeed:double,redAnimate:bool,greenAnimate:bool,blueAnimate:bool,alphaAnimate:bool,repeat:bool) {
            var previousComponent = hasColorTween ? this.ColorTween : null;
            var c = _ColorTweenComponentPool.length>0? _colorTweenComponentPool.pop() : new ColorTweenComponent();
            c.redMin = redMin;
            c.redMax = redMax;
            c.redSpeed = redSpeed;
            c.greenMin = greenMin;
            c.greenMax = greenMax;
            c.greenSpeed = greenSpeed;
            c.blueMin = blueMin;
            c.blueMax = blueMax;
            c.blueSpeed = blueSpeed;
            c.alphaMin = alphaMin;
            c.alphaMax = alphaMax;
            c.alphaSpeed = alphaSpeed;
            c.redAnimate = redAnimate;
            c.greenAnimate = greenAnimate;
            c.blueAnimate = blueAnimate;
            c.alphaAnimate = alphaAnimate;
            c.repeat = repeat;
            replaceComponent(Component.ColorTween, c) ;
            if (previousComponent != null)
                _colorTweenComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeColorTween() {
            var c = ColorTween;
            removeComponent(Component.ColorTween);
            _colorTweenComponentPool.push(c);
            return this;
        }

        /** Entity: Destroy methods*/


        /** @type {boolean} */
        public bool isDestroy {
            get {
                return hasComponent(Component.Destroy);
            }
            set {
                if (value)
                    addComponent(Component.Destroy, Entity.DestroyComponent);
                else
                    removeComponent(Component.Destroy);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setDestroy(bool value) {
            isDestroy = value;
            return this;
        }

        /** Entity: Enemy methods*/


        /** @type {boolean} */
        public bool isEnemy {
            get {
                return hasComponent(Component.Enemy);
            }
            set {
                if (value)
                    addComponent(Component.Enemy, Entity.EnemyComponent);
                else
                    removeComponent(Component.Enemy);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setEnemy(bool value) {
            isEnemy = value;
            return this;
        }

        /** Entity: Expires methods*/

        public ExpiresComponent expires {
            get {
                return (ExpiresComponent)getComponent(Component.Expires);
            }
        }
        public bool hasExpires {
            get {
                return hasComponent(Component.Expires);
            }
        }
        public void clearExpiresComponentPool() {
            _expiresComponentPool.clear();
        }
        public Entity addExpires(delay:double) {
            var c = _expiresComponentPool.length>0? _expiresComponentPool.pop() : new ExpiresComponent();
            c.delay = delay;
            addComponent(Component.Expires, c);
            return this;
        }
        public Entity replaceExpires(delay:double) {
            var previousComponent = hasExpires ? this.Expires : null;
            var c = _ExpiresComponentPool.length>0? _expiresComponentPool.pop() : new ExpiresComponent();
            c.delay = delay;
            replaceComponent(Component.Expires, c) ;
            if (previousComponent != null)
                _expiresComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeExpires() {
            var c = Expires;
            removeComponent(Component.Expires);
            _expiresComponentPool.push(c);
            return this;
        }

        /** Entity: Firing methods*/


        /** @type {boolean} */
        public bool isFiring {
            get {
                return hasComponent(Component.Firing);
            }
            set {
                if (value)
                    addComponent(Component.Firing, Entity.FiringComponent);
                else
                    removeComponent(Component.Firing);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setFiring(bool value) {
            isFiring = value;
            return this;
        }

        /** Entity: Health methods*/

        public HealthComponent health {
            get {
                return (HealthComponent)getComponent(Component.Health);
            }
        }
        public bool hasHealth {
            get {
                return hasComponent(Component.Health);
            }
        }
        public void clearHealthComponentPool() {
            _healthComponentPool.clear();
        }
        public Entity addHealth(health:double,maximumHealth:double) {
            var c = _healthComponentPool.length>0? _healthComponentPool.pop() : new HealthComponent();
            c.health = health;
            c.maximumHealth = maximumHealth;
            addComponent(Component.Health, c);
            return this;
        }
        public Entity replaceHealth(health:double,maximumHealth:double) {
            var previousComponent = hasHealth ? this.Health : null;
            var c = _HealthComponentPool.length>0? _healthComponentPool.pop() : new HealthComponent();
            c.health = health;
            c.maximumHealth = maximumHealth;
            replaceComponent(Component.Health, c) ;
            if (previousComponent != null)
                _healthComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeHealth() {
            var c = Health;
            removeComponent(Component.Health);
            _healthComponentPool.push(c);
            return this;
        }

        /** Entity: Layer methods*/

        public LayerComponent layer {
            get {
                return (LayerComponent)getComponent(Component.Layer);
            }
        }
        public bool hasLayer {
            get {
                return hasComponent(Component.Layer);
            }
        }
        public void clearLayerComponentPool() {
            _layerComponentPool.clear();
        }
        public Entity addLayer(ordinal:int) {
            var c = _layerComponentPool.length>0? _layerComponentPool.pop() : new LayerComponent();
            c.ordinal = ordinal;
            addComponent(Component.Layer, c);
            return this;
        }
        public Entity replaceLayer(ordinal:int) {
            var previousComponent = hasLayer ? this.Layer : null;
            var c = _LayerComponentPool.length>0? _layerComponentPool.pop() : new LayerComponent();
            c.ordinal = ordinal;
            replaceComponent(Component.Layer, c) ;
            if (previousComponent != null)
                _layerComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeLayer() {
            var c = Layer;
            removeComponent(Component.Layer);
            _layerComponentPool.push(c);
            return this;
        }

        /** Entity: Life methods*/

        public LifeComponent life {
            get {
                return (LifeComponent)getComponent(Component.Life);
            }
        }
        public bool hasLife {
            get {
                return hasComponent(Component.Life);
            }
        }
        public void clearLifeComponentPool() {
            _lifeComponentPool.clear();
        }
        public Entity addLife(count:int) {
            var c = _lifeComponentPool.length>0? _lifeComponentPool.pop() : new LifeComponent();
            c.count = count;
            addComponent(Component.Life, c);
            return this;
        }
        public Entity replaceLife(count:int) {
            var previousComponent = hasLife ? this.Life : null;
            var c = _LifeComponentPool.length>0? _lifeComponentPool.pop() : new LifeComponent();
            c.count = count;
            replaceComponent(Component.Life, c) ;
            if (previousComponent != null)
                _lifeComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeLife() {
            var c = Life;
            removeComponent(Component.Life);
            _lifeComponentPool.push(c);
            return this;
        }

        /** Entity: Mine methods*/


        /** @type {boolean} */
        public bool isMine {
            get {
                return hasComponent(Component.Mine);
            }
            set {
                if (value)
                    addComponent(Component.Mine, Entity.MineComponent);
                else
                    removeComponent(Component.Mine);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setMine(bool value) {
            isMine = value;
            return this;
        }

        /** Entity: Mouse methods*/

        public MouseComponent mouse {
            get {
                return (MouseComponent)getComponent(Component.Mouse);
            }
        }
        public bool hasMouse {
            get {
                return hasComponent(Component.Mouse);
            }
        }
        public void clearMouseComponentPool() {
            _mouseComponentPool.clear();
        }
        public Entity addMouse(x:double,y:double) {
            var c = _mouseComponentPool.length>0? _mouseComponentPool.pop() : new MouseComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Mouse, c);
            return this;
        }
        public Entity replaceMouse(x:double,y:double) {
            var previousComponent = hasMouse ? this.Mouse : null;
            var c = _MouseComponentPool.length>0? _mouseComponentPool.pop() : new MouseComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Mouse, c) ;
            if (previousComponent != null)
                _mouseComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeMouse() {
            var c = Mouse;
            removeComponent(Component.Mouse);
            _mouseComponentPool.push(c);
            return this;
        }

        /** Entity: Player methods*/


        /** @type {boolean} */
        public bool isPlayer {
            get {
                return hasComponent(Component.Player);
            }
            set {
                if (value)
                    addComponent(Component.Player, Entity.PlayerComponent);
                else
                    removeComponent(Component.Player);
            }
        }
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        Entity setPlayer(bool value) {
            isPlayer = value;
            return this;
        }

        /** Entity: Position methods*/

        public PositionComponent position {
            get {
                return (PositionComponent)getComponent(Component.Position);
            }
        }
        public bool hasPosition {
            get {
                return hasComponent(Component.Position);
            }
        }
        public void clearPositionComponentPool() {
            _positionComponentPool.clear();
        }
        public Entity addPosition(x:double,y:double) {
            var c = _positionComponentPool.length>0? _positionComponentPool.pop() : new PositionComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Position, c);
            return this;
        }
        public Entity replacePosition(x:double,y:double) {
            var previousComponent = hasPosition ? this.Position : null;
            var c = _PositionComponentPool.length>0? _positionComponentPool.pop() : new PositionComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Position, c) ;
            if (previousComponent != null)
                _positionComponentPool.push(previousComponent);
            return this;
        }
        public Entity removePosition() {
            var c = Position;
            removeComponent(Component.Position);
            _positionComponentPool.push(c);
            return this;
        }

        /** Entity: Resource methods*/

        public ResourceComponent resource {
            get {
                return (ResourceComponent)getComponent(Component.Resource);
            }
        }
        public bool hasResource {
            get {
                return hasComponent(Component.Resource);
            }
        }
        public void clearResourceComponentPool() {
            _resourceComponentPool.clear();
        }
        public Entity addResource(path:string,sprite:Object?,bgd:bool=false) {
            var c = _resourceComponentPool.length>0? _resourceComponentPool.pop() : new ResourceComponent();
            c.path = path;
            c.sprite = sprite;
            c.bgd = bgd;
            addComponent(Component.Resource, c);
            return this;
        }
        public Entity replaceResource(path:string,sprite:Object?,bgd:bool=false) {
            var previousComponent = hasResource ? this.Resource : null;
            var c = _ResourceComponentPool.length>0? _resourceComponentPool.pop() : new ResourceComponent();
            c.path = path;
            c.sprite = sprite;
            c.bgd = bgd;
            replaceComponent(Component.Resource, c) ;
            if (previousComponent != null)
                _resourceComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeResource() {
            var c = Resource;
            removeComponent(Component.Resource);
            _resourceComponentPool.push(c);
            return this;
        }

        /** Entity: ScaleTween methods*/

        public ScaleTweenComponent scaleTween {
            get {
                return (ScaleTweenComponent)getComponent(Component.ScaleTween);
            }
        }
        public bool hasScaleTween {
            get {
                return hasComponent(Component.ScaleTween);
            }
        }
        public void clearScaleTweenComponentPool() {
            _scaleTweenComponentPool.clear();
        }
        public Entity addScaleTween(min:double,max:double,speed:double,repeat:bool,active:bool) {
            var c = _scaleTweenComponentPool.length>0? _scaleTweenComponentPool.pop() : new ScaleTweenComponent();
            c.min = min;
            c.max = max;
            c.speed = speed;
            c.repeat = repeat;
            c.active = active;
            addComponent(Component.ScaleTween, c);
            return this;
        }
        public Entity replaceScaleTween(min:double,max:double,speed:double,repeat:bool,active:bool) {
            var previousComponent = hasScaleTween ? this.ScaleTween : null;
            var c = _ScaleTweenComponentPool.length>0? _scaleTweenComponentPool.pop() : new ScaleTweenComponent();
            c.min = min;
            c.max = max;
            c.speed = speed;
            c.repeat = repeat;
            c.active = active;
            replaceComponent(Component.ScaleTween, c) ;
            if (previousComponent != null)
                _scaleTweenComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeScaleTween() {
            var c = ScaleTween;
            removeComponent(Component.ScaleTween);
            _scaleTweenComponentPool.push(c);
            return this;
        }

        /** Entity: Scale methods*/

        public ScaleComponent scale {
            get {
                return (ScaleComponent)getComponent(Component.Scale);
            }
        }
        public bool hasScale {
            get {
                return hasComponent(Component.Scale);
            }
        }
        public void clearScaleComponentPool() {
            _scaleComponentPool.clear();
        }
        public Entity addScale(x:double,y:double) {
            var c = _scaleComponentPool.length>0? _scaleComponentPool.pop() : new ScaleComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Scale, c);
            return this;
        }
        public Entity replaceScale(x:double,y:double) {
            var previousComponent = hasScale ? this.Scale : null;
            var c = _ScaleComponentPool.length>0? _scaleComponentPool.pop() : new ScaleComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Scale, c) ;
            if (previousComponent != null)
                _scaleComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeScale() {
            var c = Scale;
            removeComponent(Component.Scale);
            _scaleComponentPool.push(c);
            return this;
        }

        /** Entity: Score methods*/

        public ScoreComponent score {
            get {
                return (ScoreComponent)getComponent(Component.Score);
            }
        }
        public bool hasScore {
            get {
                return hasComponent(Component.Score);
            }
        }
        public void clearScoreComponentPool() {
            _scoreComponentPool.clear();
        }
        public Entity addScore(value:double) {
            var c = _scoreComponentPool.length>0? _scoreComponentPool.pop() : new ScoreComponent();
            c.value = value;
            addComponent(Component.Score, c);
            return this;
        }
        public Entity replaceScore(value:double) {
            var previousComponent = hasScore ? this.Score : null;
            var c = _ScoreComponentPool.length>0? _scoreComponentPool.pop() : new ScoreComponent();
            c.value = value;
            replaceComponent(Component.Score, c) ;
            if (previousComponent != null)
                _scoreComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeScore() {
            var c = Score;
            removeComponent(Component.Score);
            _scoreComponentPool.push(c);
            return this;
        }

        /** Entity: SoundEffect methods*/

        public SoundEffectComponent soundEffect {
            get {
                return (SoundEffectComponent)getComponent(Component.SoundEffect);
            }
        }
        public bool hasSoundEffect {
            get {
                return hasComponent(Component.SoundEffect);
            }
        }
        public void clearSoundEffectComponentPool() {
            _soundEffectComponentPool.clear();
        }
        public Entity addSoundEffect(effect:int) {
            var c = _soundEffectComponentPool.length>0? _soundEffectComponentPool.pop() : new SoundEffectComponent();
            c.effect = effect;
            addComponent(Component.SoundEffect, c);
            return this;
        }
        public Entity replaceSoundEffect(effect:int) {
            var previousComponent = hasSoundEffect ? this.SoundEffect : null;
            var c = _SoundEffectComponentPool.length>0? _soundEffectComponentPool.pop() : new SoundEffectComponent();
            c.effect = effect;
            replaceComponent(Component.SoundEffect, c) ;
            if (previousComponent != null)
                _soundEffectComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeSoundEffect() {
            var c = SoundEffect;
            removeComponent(Component.SoundEffect);
            _soundEffectComponentPool.push(c);
            return this;
        }

        /** Entity: Tint methods*/

        public TintComponent tint {
            get {
                return (TintComponent)getComponent(Component.Tint);
            }
        }
        public bool hasTint {
            get {
                return hasComponent(Component.Tint);
            }
        }
        public void clearTintComponentPool() {
            _tintComponentPool.clear();
        }
        public Entity addTint(r:int,g:int,b:int,a:int) {
            var c = _tintComponentPool.length>0? _tintComponentPool.pop() : new TintComponent();
            c.r = r;
            c.g = g;
            c.b = b;
            c.a = a;
            addComponent(Component.Tint, c);
            return this;
        }
        public Entity replaceTint(r:int,g:int,b:int,a:int) {
            var previousComponent = hasTint ? this.Tint : null;
            var c = _TintComponentPool.length>0? _tintComponentPool.pop() : new TintComponent();
            c.r = r;
            c.g = g;
            c.b = b;
            c.a = a;
            replaceComponent(Component.Tint, c) ;
            if (previousComponent != null)
                _tintComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeTint() {
            var c = Tint;
            removeComponent(Component.Tint);
            _tintComponentPool.push(c);
            return this;
        }

        /** Entity: Velocity methods*/

        public VelocityComponent velocity {
            get {
                return (VelocityComponent)getComponent(Component.Velocity);
            }
        }
        public bool hasVelocity {
            get {
                return hasComponent(Component.Velocity);
            }
        }
        public void clearVelocityComponentPool() {
            _velocityComponentPool.clear();
        }
        public Entity addVelocity(x:double,y:double) {
            var c = _velocityComponentPool.length>0? _velocityComponentPool.pop() : new VelocityComponent();
            c.x = x;
            c.y = y;
            addComponent(Component.Velocity, c);
            return this;
        }
        public Entity replaceVelocity(x:double,y:double) {
            var previousComponent = hasVelocity ? this.Velocity : null;
            var c = _VelocityComponentPool.length>0? _velocityComponentPool.pop() : new VelocityComponent();
            c.x = x;
            c.y = y;
            replaceComponent(Component.Velocity, c) ;
            if (previousComponent != null)
                _velocityComponentPool.push(previousComponent);
            return this;
        }
        public Entity removeVelocity() {
            var c = Velocity;
            removeComponent(Component.Velocity);
            _velocityComponentPool.push(c);
            return this;
        }


        Bag<BoundsComponent> _boundsComponentPool;

        BulletComponent _bulletComponent;

        Bag<ColorTweenComponent> _colorTweenComponentPool;

        DestroyComponent _destroyComponent;

        EnemyComponent _enemyComponent;

        Bag<ExpiresComponent> _expiresComponentPool;

        FiringComponent _firingComponent;

        Bag<HealthComponent> _healthComponentPool;

        Bag<LayerComponent> _layerComponentPool;

        Bag<LifeComponent> _lifeComponentPool;

        MineComponent _mineComponent;

        Bag<MouseComponent> _mouseComponentPool;

        PlayerComponent _playerComponent;

        Bag<PositionComponent> _positionComponentPool;

        Bag<ResourceComponent> _resourceComponentPool;

        Bag<ScaleTweenComponent> _scaleTweenComponentPool;

        Bag<ScaleComponent> _scaleComponentPool;

        Bag<ScoreComponent> _scoreComponentPool;

        Bag<SoundEffectComponent> _soundEffectComponentPool;

        Bag<TintComponent> _tintComponentPool;

        Bag<VelocityComponent> _velocityComponentPool;

    }    
}