/* bosco.h generated by valac 0.34.4, the Vala compiler, do not modify */


#ifndef __SRC_BOSCO_H__
#define __SRC_BOSCO_H__

#include <glib.h>
#include <glib-object.h>
#include <SDL2/SDL_pixels.h>
#include <float.h>
#include <math.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_ttf.h>
#include <stdlib.h>
#include <string.h>
#include <SDL2/SDL_rect.h>
#include <SDL2/SDL_events.h>
#include <SDL2/SDL_video.h>
#include <gee.h>

G_BEGIN_DECLS


#define BOSCO_TYPE_COLOR (bosco_color_get_type ())
#define BOSCO_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOSCO_TYPE_COLOR, BoscoColor))
#define BOSCO_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOSCO_TYPE_COLOR, BoscoColorClass))
#define BOSCO_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOSCO_TYPE_COLOR))
#define BOSCO_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOSCO_TYPE_COLOR))
#define BOSCO_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOSCO_TYPE_COLOR, BoscoColorClass))

typedef struct _BoscoColor BoscoColor;
typedef struct _BoscoColorClass BoscoColorClass;
typedef struct _BoscoColorPrivate BoscoColorPrivate;

#define BOSCO_TYPE_SCALE (bosco_scale_get_type ())
typedef struct _BoscoScale BoscoScale;

#define BOSCO_TYPE_SPRITE (bosco_sprite_get_type ())
#define BOSCO_SPRITE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOSCO_TYPE_SPRITE, BoscoSprite))
#define BOSCO_SPRITE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOSCO_TYPE_SPRITE, BoscoSpriteClass))
#define BOSCO_IS_SPRITE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOSCO_TYPE_SPRITE))
#define BOSCO_IS_SPRITE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOSCO_TYPE_SPRITE))
#define BOSCO_SPRITE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOSCO_TYPE_SPRITE, BoscoSpriteClass))

typedef struct _BoscoSprite BoscoSprite;
typedef struct _BoscoSpriteClass BoscoSpriteClass;
typedef struct _BoscoSpritePrivate BoscoSpritePrivate;

#define BOSCO_TYPE_ABSTRACT_GAME (bosco_abstract_game_get_type ())
#define BOSCO_ABSTRACT_GAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BOSCO_TYPE_ABSTRACT_GAME, BoscoAbstractGame))
#define BOSCO_ABSTRACT_GAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BOSCO_TYPE_ABSTRACT_GAME, BoscoAbstractGameClass))
#define BOSCO_IS_ABSTRACT_GAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BOSCO_TYPE_ABSTRACT_GAME))
#define BOSCO_IS_ABSTRACT_GAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BOSCO_TYPE_ABSTRACT_GAME))
#define BOSCO_ABSTRACT_GAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BOSCO_TYPE_ABSTRACT_GAME, BoscoAbstractGameClass))

typedef struct _BoscoAbstractGame BoscoAbstractGame;
typedef struct _BoscoAbstractGameClass BoscoAbstractGameClass;
typedef struct _BoscoAbstractGamePrivate BoscoAbstractGamePrivate;

struct _BoscoColor {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BoscoColorPrivate * priv;
};

struct _BoscoColorClass {
	GTypeClass parent_class;
	void (*finalize) (BoscoColor *self);
};

struct _BoscoScale {
	gdouble x;
	gdouble y;
};

struct _BoscoSprite {
	GObject parent_instance;
	BoscoSpritePrivate * priv;
	SDL_Texture* texture;
	gint width;
	gint height;
	gint x;
	gint y;
	BoscoScale scale;
	SDL_Color color;
	gboolean centered;
	gint layer;
	gint id;
};

struct _BoscoSpriteClass {
	GObjectClass parent_class;
};

struct _BoscoAbstractGame {
	GObject parent_instance;
	BoscoAbstractGamePrivate * priv;
	gchar* name;
	gint width;
	gint height;
	gboolean running;
	SDL_Window* window;
	SDL_Renderer* renderer;
	GPtrArray* sprites;
	GeeArrayList* onetime;
	guint8* keys;
	gint keys_length1;
	gboolean showFps;
};

struct _BoscoAbstractGameClass {
	GObjectClass parent_class;
	void (*Events) (BoscoAbstractGame* self, SDL_Event e);
	void (*Update) (BoscoAbstractGame* self, gdouble delta);
	void (*Draw) (BoscoAbstractGame* self, gdouble delta);
	void (*Dispose) (BoscoAbstractGame* self);
	gboolean (*Initialize) (BoscoAbstractGame* self);
};


gpointer bosco_color_ref (gpointer instance);
void bosco_color_unref (gpointer instance);
GParamSpec* bosco_param_spec_color (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void bosco_value_set_color (GValue* value, gpointer v_object);
void bosco_value_take_color (GValue* value, gpointer v_object);
gpointer bosco_value_get_color (const GValue* value);
GType bosco_color_get_type (void) G_GNUC_CONST;
extern SDL_Color bosco_color_TransparentBlack;
extern SDL_Color bosco_color_TransparentWhite;
extern SDL_Color bosco_color_AliceBlue;
extern SDL_Color bosco_color_AntiqueWhite;
extern SDL_Color bosco_color_Aqua;
extern SDL_Color bosco_color_Aquamarine;
extern SDL_Color bosco_color_Azure;
extern SDL_Color bosco_color_Beige;
extern SDL_Color bosco_color_Bisque;
extern SDL_Color bosco_color_Black;
extern SDL_Color bosco_color_BlanchedAlmond;
extern SDL_Color bosco_color_Blue;
extern SDL_Color bosco_color_BlueViolet;
extern SDL_Color bosco_color_Brown;
extern SDL_Color bosco_color_BurlyWood;
extern SDL_Color bosco_color_CadetBlue;
extern SDL_Color bosco_color_Chartreuse;
extern SDL_Color bosco_color_Chocolate;
extern SDL_Color bosco_color_Coral;
extern SDL_Color bosco_color_CornflowerBlue;
extern SDL_Color bosco_color_Cornsilk;
extern SDL_Color bosco_color_Crimson;
extern SDL_Color bosco_color_Cyan;
extern SDL_Color bosco_color_DarkBlue;
extern SDL_Color bosco_color_DarkCyan;
extern SDL_Color bosco_color_DarkGoldenrod;
extern SDL_Color bosco_color_DarkGray;
extern SDL_Color bosco_color_DarkGreen;
extern SDL_Color bosco_color_DarkKhaki;
extern SDL_Color bosco_color_DarkMagenta;
extern SDL_Color bosco_color_DarkOliveGreen;
extern SDL_Color bosco_color_DarkOrange;
extern SDL_Color bosco_color_DarkOrchid;
extern SDL_Color bosco_color_DarkRed;
extern SDL_Color bosco_color_DarkSalmon;
extern SDL_Color bosco_color_DarkSeaGreen;
extern SDL_Color bosco_color_DarkSlateBlue;
extern SDL_Color bosco_color_DarkSlateGray;
extern SDL_Color bosco_color_DarkTurquoise;
extern SDL_Color bosco_color_DarkViolet;
extern SDL_Color bosco_color_DeepPink;
extern SDL_Color bosco_color_DeepSkyBlue;
extern SDL_Color bosco_color_DimGray;
extern SDL_Color bosco_color_DodgerBlue;
extern SDL_Color bosco_color_Firebrick;
extern SDL_Color bosco_color_FloralWhite;
extern SDL_Color bosco_color_ForestGreen;
extern SDL_Color bosco_color_Fuchsia;
extern SDL_Color bosco_color_Gainsboro;
extern SDL_Color bosco_color_GhostWhite;
extern SDL_Color bosco_color_Gold;
extern SDL_Color bosco_color_Goldenrod;
extern SDL_Color bosco_color_Gray;
extern SDL_Color bosco_color_Green;
extern SDL_Color bosco_color_GreenYellow;
extern SDL_Color bosco_color_Honeydew;
extern SDL_Color bosco_color_HotPink;
extern SDL_Color bosco_color_IndianRed;
extern SDL_Color bosco_color_Indigo;
extern SDL_Color bosco_color_Ivory;
extern SDL_Color bosco_color_Khaki;
extern SDL_Color bosco_color_Lavender;
extern SDL_Color bosco_color_LavenderBlush;
extern SDL_Color bosco_color_LawnGreen;
extern SDL_Color bosco_color_LemonChiffon;
extern SDL_Color bosco_color_LightBlue;
extern SDL_Color bosco_color_LightCoral;
extern SDL_Color bosco_color_LightCyan;
extern SDL_Color bosco_color_LightGoldenrodYellow;
extern SDL_Color bosco_color_LightGray;
extern SDL_Color bosco_color_LightGreen;
extern SDL_Color bosco_color_LightPink;
extern SDL_Color bosco_color_LightSalmon;
extern SDL_Color bosco_color_LightSeaGreen;
extern SDL_Color bosco_color_LightSkyBlue;
extern SDL_Color bosco_color_LightSlateGray;
extern SDL_Color bosco_color_LightSteelBlue;
extern SDL_Color bosco_color_LightYellow;
extern SDL_Color bosco_color_Lime;
extern SDL_Color bosco_color_LimeGreen;
extern SDL_Color bosco_color_Linen;
extern SDL_Color bosco_color_Magenta;
extern SDL_Color bosco_color_Maroon;
extern SDL_Color bosco_color_MediumAquamarine;
extern SDL_Color bosco_color_MediumBlue;
extern SDL_Color bosco_color_MediumOrchid;
extern SDL_Color bosco_color_MediumPurple;
extern SDL_Color bosco_color_MediumSeaGreen;
extern SDL_Color bosco_color_MediumSlateBlue;
extern SDL_Color bosco_color_MediumSpringGreen;
extern SDL_Color bosco_color_MediumTurquoise;
extern SDL_Color bosco_color_MediumVioletRed;
extern SDL_Color bosco_color_MidnightBlue;
extern SDL_Color bosco_color_MintCream;
extern SDL_Color bosco_color_MistyRose;
extern SDL_Color bosco_color_Moccasin;
extern SDL_Color bosco_color_MonoGameOrange;
extern SDL_Color bosco_color_NavajoWhite;
extern SDL_Color bosco_color_Navy;
extern SDL_Color bosco_color_OldLace;
extern SDL_Color bosco_color_Olive;
extern SDL_Color bosco_color_OliveDrab;
extern SDL_Color bosco_color_Orange;
extern SDL_Color bosco_color_OrangeRed;
extern SDL_Color bosco_color_Orchid;
extern SDL_Color bosco_color_PaleGoldenrod;
extern SDL_Color bosco_color_PaleGreen;
extern SDL_Color bosco_color_PaleTurquoise;
extern SDL_Color bosco_color_PaleVioletRed;
extern SDL_Color bosco_color_PapayaWhip;
extern SDL_Color bosco_color_PeachPuff;
extern SDL_Color bosco_color_Peru;
extern SDL_Color bosco_color_Pink;
extern SDL_Color bosco_color_Plum;
extern SDL_Color bosco_color_PowderBlue;
extern SDL_Color bosco_color_Purple;
extern SDL_Color bosco_color_Red;
extern SDL_Color bosco_color_RosyBrown;
extern SDL_Color bosco_color_RoyalBlue;
extern SDL_Color bosco_color_SaddleBrown;
extern SDL_Color bosco_color_Salmon;
extern SDL_Color bosco_color_SandyBrown;
extern SDL_Color bosco_color_SeaGreen;
extern SDL_Color bosco_color_SeaShell;
extern SDL_Color bosco_color_Sienna;
extern SDL_Color bosco_color_Silver;
extern SDL_Color bosco_color_SkyBlue;
extern SDL_Color bosco_color_SlateBlue;
extern SDL_Color bosco_color_SlateGray;
extern SDL_Color bosco_color_Snow;
extern SDL_Color bosco_color_SpringGreen;
extern SDL_Color bosco_color_SteelBlue;
extern SDL_Color bosco_color_Tan;
extern SDL_Color bosco_color_Teal;
extern SDL_Color bosco_color_Thistle;
extern SDL_Color bosco_color_Tomato;
extern SDL_Color bosco_color_Turquoise;
extern SDL_Color bosco_color_Violet;
extern SDL_Color bosco_color_Wheat;
extern SDL_Color bosco_color_White;
extern SDL_Color bosco_color_WhiteSmoke;
extern SDL_Color bosco_color_Yellow;
extern SDL_Color bosco_color_YellowGreen;
BoscoColor* bosco_color_new (void);
BoscoColor* bosco_color_construct (GType object_type);
GType bosco_scale_get_type (void) G_GNUC_CONST;
BoscoScale* bosco_scale_dup (const BoscoScale* self);
void bosco_scale_free (BoscoScale* self);
GType bosco_sprite_get_type (void) G_GNUC_CONST;
extern gint bosco_sprite_uniqueId;
BoscoSprite* bosco_sprite_fromRenderedText (SDL_Renderer* renderer, TTF_Font* font, const gchar* text, SDL_Color color);
void bosco_sprite_setText (BoscoSprite* self, SDL_Renderer* renderer, TTF_Font* font, const gchar* text, SDL_Color color);
BoscoSprite* bosco_sprite_fromFile (SDL_Renderer* renderer, const gchar* path);
void bosco_sprite_render (BoscoSprite* self, SDL_Renderer* renderer, gint x, gint y, SDL_Rect* clip);
BoscoSprite* bosco_sprite_new (void);
BoscoSprite* bosco_sprite_construct (GType object_type);
GType bosco_abstract_game_get_type (void) G_GNUC_CONST;
BoscoAbstractGame* bosco_abstract_game_new (void);
BoscoAbstractGame* bosco_abstract_game_construct (GType object_type);
gint bosco_abstract_game_Run (BoscoAbstractGame* self);
void bosco_abstract_game_Events (BoscoAbstractGame* self, SDL_Event e);
void bosco_abstract_game_Update (BoscoAbstractGame* self, gdouble delta);
void bosco_abstract_game_Draw (BoscoAbstractGame* self, gdouble delta);
void bosco_abstract_game_Dispose (BoscoAbstractGame* self);
gboolean bosco_abstract_game_Initialize (BoscoAbstractGame* self);
gdouble bosco_abstract_game_get_delta (BoscoAbstractGame* self);


G_END_DECLS

#endif
